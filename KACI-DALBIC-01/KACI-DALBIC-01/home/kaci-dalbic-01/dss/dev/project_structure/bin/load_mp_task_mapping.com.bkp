#!/usr/bin/ksh
. /u/dss/$DSS_MODE/warehouse/globals.com

#################################################################################
# load_mp_task_mapping
#
# Date          Developer       Description
# ===========   =========       ================================================
# 04/22/2016    Cesar L.        Load MP_TASK_MAPPING_MASTER table
#                               from SSE_MP_TASK_MAPPING_VIEW
#
#################################################################################

YEAR=$1

if [[ $# -eq 0 ]]; then
. /u/dss/$DSS_MODE/common/bin/get_calendar.com
   YEAR=$C_YEAR
fi

echo
echo  `date`
echo --------------------
echo "Loading MP Task Mapping ${YEAR} data"
echo --------------------
echo

# Directories
#
WORK_DIR=/u/dss/$DSS_MODE/project_structure/

#
# Tables
#
BASE_NAME=mp_task_mapping
TABLE_NAME=mp_task_mapping_master
STAGE_TABLE=stg_${BASE_NAME}

# make sure tables are present...
${WORK_DIR}objects/${STAGE_TABLE}.tbl            >> $LOG
${WORK_DIR}objects/${TABLE_NAME}.tbl             >> $LOG
${WORK_DIR}objects/${BASE_NAME}.view $YEAR        >> $LOG
${WORK_DIR}objects/${BASE_NAME}_yyyy.view $YEAR   >> $LOG

#* ****************************************************************** *
#*                 Staging Table Load                                 *
#* ****************************************************************** *

echo " "
echo " Staging Load"
echo " "


run_sql <<-END_SQL >>${LOG} 2>&1
SET LINESIZE 200;
WHENEVER SQLERROR EXIT -1 ROLLBACK;
SET SERVEROUTPUT ON;

TRUNCATE TABLE ${STAGE_TABLE};

/* ******************************************** */
/*                 Main Block                   */
/* ******************************************** */

DECLARE

  /* Type declarations */
  TYPE tmTabType    IS TABLE OF ${STAGE_TABLE}%ROWTYPE;

  /* Variables */
  row_tm_curr         ${TABLE_NAME}%ROWTYPE;

  tab_new_tm          tmTabType := tmTabType();

  v_count           Number    := 0;
  v_idx             Number    := 0;
  v_bulk_rows       Number    := 1000;

  v_dd              Date      := TO_DATE('02/02/2050', 'MM/DD/YYYY');


  v_start_time      NUMBER;
  v_end_time        NUMBER;

  /*  Main Cursor  */
  CURSOR cur_main
  IS
    select mp_project_num as master_project,
           production_office,
           project_num as project,
           task_num as task,
           firm,
           MIN(owning_production_office_flag) KEEP (Dense_Rank Last Order By last_update_date) as  opo_flag,
           MIN(last_updated_by) KEEP (Dense_Rank Last Order By last_update_date) as  last_updated_by,
           MAX(last_update_date) as last_update_date
    from SSE_MP_TASK_MAPPING_VIEW
    group by mp_project_num, production_office, project_num, task_num, firm;


  /* MP Task Mapping exists function */

  Function F_Exists
  (
    p_rv    IN  cur_main%ROWTYPE,
    p_row   OUT ${TABLE_NAME}%ROWTYPE
  )
  RETURN BOOLEAN
  IS
    res BOOLEAN := false;
  BEGIN

    FOR row IN (
      Select *
      From  ${TABLE_NAME} t
      Where t.master_project    = p_rv.master_project
        and t.production_office = p_rv.production_office
        and t.project           = p_rv.project
        and t.task              = p_rv.task
        and t.firm              = p_rv.firm
    ) LOOP

      res := true;
      p_row := row;

      exit;

    END LOOP;

    RETURN(res);

  END F_Exists;

  /* Convert Function - From Cursor row into table row */
  Function F_Convert
  (
    p_rv    IN  cur_main%ROWTYPE
  )
  Return ${TABLE_NAME}%ROWTYPE
  Is
    p_row   ${TABLE_NAME}%ROWTYPE;
  Begin

    p_row.master_project                := p_rv.master_project;
    p_row.production_office             := p_rv.production_office;
    p_row.owning_production_office_flag := p_rv.opo_flag;
    p_row.firm                          := p_rv.firm;
    p_row.project                       := p_rv.project;
    p_row.task                          := p_rv.task;
    p_row.association_date              := sysdate;
    p_row.disassociation_date           := v_dd;
    p_row.last_updated_by               := p_rv.last_updated_by;
    p_row.last_update_date              := p_rv.last_update_date;
    p_row.control_date                  := sysdate;

    Return (p_row);

  End F_Convert;

  /* Perform Bulk insert */
  Procedure P_Bulk_Insert
  (
    p_rows  IN Number default v_bulk_rows
  )
  Is
  Begin

    IF v_idx >= p_rows THEN

      --Bulk bind
      FORALL i IN tab_new_tm.FIRST .. tab_new_tm.LAST
        INSERT INTO ${STAGE_TABLE}
        VALUES tab_new_tm(i);

      COMMIT;

      v_count := v_count + v_idx;

      --Initialize table variable and index
      tab_new_tm  := tmTabType();
      v_idx       :=  0;

      v_end_time := DBMS_UTILITY.get_time;
      DBMS_OUTPUT.PUT_LINE('Insert at count: ' || v_count || ' Elapsed time: ' || to_char(v_end_time-v_start_time));

    END IF;

  End P_Bulk_Insert;

  /* Insert Procedure */
  Procedure P_Insert
  (
    p_row       IN  ${TABLE_NAME}%ROWTYPE
  )
  Is
    stg_row ${STAGE_TABLE}%ROWTYPE;
  Begin

    stg_row.master_project                := p_row.master_project;
    stg_row.production_office             := p_row.production_office;
    stg_row.owning_production_office_flag := p_row.owning_production_office_flag;
    stg_row.firm                          := p_row.firm;
    stg_row.project                       := p_row.project;
    stg_row.task                          := p_row.task;
    stg_row.association_date              := p_row.association_date;
    stg_row.disassociation_date           := p_row.disassociation_date;
    stg_row.last_updated_by               := p_row.last_updated_by;
    stg_row.last_update_date              := p_row.last_update_date;
    stg_row.control_date                  := sysdate;
    stg_row.valid                         := null;
    stg_row.validation_result             := null;

    v_idx := v_idx + 1;
    tab_new_tm.EXTEND;
    tab_new_tm(v_idx) := stg_row;

    P_Bulk_Insert();

  End P_Insert;


BEGIN

  v_start_time := DBMS_UTILITY.get_time;

  dbms_output.put_line('Main cursor');

  For row in cur_main Loop

    If F_Exists(row, row_tm_curr) Then

      /* If records already exists and disassociation date has to be updated then insert record to be merged */

      If row_tm_curr.disassociation_date < v_dd OR
         (row.opo_flag Is Not Null And row.opo_flag != row_tm_curr.owning_production_office_flag)
        Then

        row_tm_curr.disassociation_date := v_dd;

        P_Insert(row_tm_curr);

      End If;

    Else

      /* If do not exist convert then insert new record */

      P_Insert(F_Convert(row));

    End If;


  End Loop; -- Main Loop

  /* Bulk insert the rest, if any */
  P_Bulk_Insert(0);




END;
/

  /* ****************************************************************** */
  /*                      Staging Validation                            */
  /* ****************************************************************** */

  DELETE FROM xfer_validation_errors WHERE table_name = '${STAGE_TABLE}';
  COMMIT;

  exec xfer_validation('${STAGE_TABLE}', ${YEAR});

  INSERT INTO xfer_validation_errors
  SELECT '${STAGE_TABLE}',
         master_project || ',' || production_office || ',' || project || ',' || task || ',' || firm || ',' ||
         ROW_NUMBER() OVER (PARTITION BY master_project,production_office,project,task,firm  ORDER BY master_project,production_office,project,task,firm) AS pk,
         valid,
         validation_result
    FROM ${STAGE_TABLE}
   WHERE valid = 'N';

  DELETE FROM ${STAGE_TABLE}
  WHERE valid = 'N';

  Commit;
  
END_SQL


#* ****************************************************************** *
#*                Enddate non existing records                        *
#* ****************************************************************** *


echo " "
echo "Starting End Date Process"
echo " "

run_sql <<-END_SQL >>${LOG} 2>&1

  /* ******************************************** */
  /*           */
  /* ******************************************** */

  UPDATE ${TABLE_NAME} t
    SET  disassociation_date = sysdate-1,
         last_updated_by     = 'System',
         last_update_date    = SYSDATE
  WHERE disassociation_date >= sysdate
    AND NOT EXISTS (select 1
                    from SSE_MP_TASK_MAPPING_VIEW v
                    where v.mp_project_num    = t.master_project
                      and v.production_office = t.production_office
                      and v.project_num       = t.project
                      and v.task_num          = t.task
                      and v.firm              = t.firm);

END_SQL

#* ****************************************************************** *
#*                   Merge staging  records                           *
#* ****************************************************************** *

echo " "
echo "Starting Merge"
echo " "

run_sql <<-END_SQL >>${LOG} 2>&1

  MERGE INTO ${TABLE_NAME} t
  USING (
        SELECT DISTINCT
               master_project               ,
               production_office            ,
               owning_production_office_flag,
               firm                         ,
               project                      ,
               task                         ,
               association_date             ,
               disassociation_date          ,
               last_updated_by              ,
               last_update_date             ,
               control_date
        FROM ${STAGE_TABLE}
        ) s
    ON  (
              t.master_project    = s.master_project
          AND t.production_office = s.production_office
          AND t.project           = s.project
          AND t.task              = s.task
          AND t.firm              = s.firm
        )
  WHEN MATCHED
  THEN
    UPDATE
      SET t.owning_production_office_flag = s.owning_production_office_flag,
          t.association_date              = s.association_date             ,
          t.disassociation_date           = s.disassociation_date          ,
          t.last_updated_by               = s.last_updated_by              ,
          t.last_update_date              = s.last_update_date             ,
          t.control_date                  = sysdate
    WHERE
          Decode(t.owning_production_office_flag, s.owning_production_office_flag, 0, 1) = 1
      OR  Decode(t.association_date             , s.association_date             , 0, 1) = 1
      OR  Decode(t.disassociation_date          , s.disassociation_date          , 0, 1) = 1
      OR  Decode(t.last_updated_by              , s.last_updated_by              , 0, 1) = 1
      OR  Decode(t.last_update_date             , s.last_update_date             , 0, 1) = 1
  WHEN NOT MATCHED
  THEN
    INSERT  (
            t.master_project               ,
            t.production_office            ,
            t.owning_production_office_flag,
            t.firm                         ,
            t.project                      ,
            t.task                         ,
            t.association_date             ,
            t.disassociation_date          ,
            t.last_updated_by              ,
            t.last_update_date             ,
            t.control_date
          )
    VALUES  (
            s.master_project               ,
            s.production_office            ,
            s.owning_production_office_flag,
            s.firm                         ,
            s.project                      ,
            s.task                         ,
            s.association_date             ,
            s.disassociation_date          ,
            s.last_updated_by              ,
            s.last_update_date             ,
            sysdate
          );

END_SQL

$UPDATE_STATS ${TABLE_NAME}

echo
echo  `date`
echo
